package com.goldwind.dbdatasyn.sqlite2db.service;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.goldwind.dataaccess.DataAsExpSet;
import com.goldwind.dbdatasyn.sqlite2db.init.Init;
import com.goldwind.dbdatasyn.sqlite2db.pojo.Col;
import com.goldwind.dbdatasyn.sqlite2db.pojo.Pk;
import com.goldwind.dbdatasyn.sqlite2db.pojo.Table;
import com.goldwind.dbdatasyn.sqlite2db.pojo.TableData;
import com.goldwind.dbdatasyn.sqlite2db.service.serviceinterface.ISynData;
import com.goldwind.dbdatasyn.sqlite2db.utils.Enums;
import com.goldwind.dbdatasyn.sqlite2db.utils.Func;
import com.goldwind.dbdatasyn.sqlite2db.utils.RunParams;

/**
 * 本地库同步关系库 PG库同步数据业务类
 *
 * @author huoran
 */
public class PgSynDataService implements ISynData
{
    /**
     * 同步数据主方法
     */
    @Override public void synData() throws Exception
    {
        //删除SQL集合
        List<String> delSqls = new ArrayList<>();
        for (Table table : RunParams.getTables())
        {
            synTableData(table, delSqls);
        }

        try
        {
            if (RunParams.isDelFalg())
            {
                //如果删除标记为true,在全表执行完新增、修改后,执行批量删除动作；删除动作如果失败不需记录错误异常
                Init.dbOperBase.openConn();
                Init.dbOperBase.excuteBatchSqlIgnorErr(delSqls.toArray(new String[delSqls.size()]));
            }
        }
        catch (Exception e)
        {

        }
        finally
        {
            try
            {
                Init.dbOperBase.closeConn();
            }
            catch (Exception e)
            {

            }
        }
    }

    /**
     * 同步单表数据
     *
     * @param table   表对象
     * @param delSqls 删除SQL集合
     */
    @Override public void synTableData(Table table, List<String> delSqls) throws Exception
    {
        //定义异常记录对象
        Map<String, HashMap<Integer, Exception>> errInfos = new HashMap<>();
        try
        {
            if (table.isPkProFlag())
            {
                //表主键包含协议号,根据协议号分组查询比对数据
                //PG库该表协议号集合
                List<Integer> dbProtocolids = table.getProtocolids();
                //本地库该表协议号集合
                List<Integer> sqliteProtocolids = table.getProtocolidsSqlite();
                //该表本地库不存在、关系库存在的协议号集合
                List<Integer> sqliteNoExistProIds = new ArrayList<>(dbProtocolids);
                sqliteNoExistProIds.removeAll(sqliteProtocolids);
                if (RunParams.isDelFalg())
                {
                    //如果删除标记为true,删除PG库中多余的协议号对应的数据行
                    deleteNoExistProData(table, sqliteNoExistProIds, errInfos, delSqls);
                }

                for (Integer protocolid : table.getProtocolidsSqlite())
                {
                    //表主键包含协议号,按本地库协议号集合依次查询比对数据
                    TableData sqliteData = querySqliteData(table, protocolid, errInfos);
                    TableData dbData = queryDbData(table, protocolid, errInfos);
                    compareTableData(sqliteData, dbData, table, errInfos, delSqls);
                }
            }
            else
            {
                //表主键不包含协议号,全表查询比对数据
                TableData sqliteData = querySqliteData(table, -1, errInfos);
                TableData dbData = queryDbData(table, -1, errInfos);
                compareTableData(sqliteData, dbData, table, errInfos, delSqls);
            }
        }
        catch (Exception e)
        {
            //主线程发生异常时,记录一条group = main的异常记录
            HashMap<Integer, Exception> flowErr = new HashMap<>();
            flowErr.put(null, e);
            errInfos.put("main", flowErr);
            DataAsExpSet.throwExpByMsg("同步表:" + table.getSchemaName() + "." + table.getTableName() + ",单表主线程发生异常", null, null, e);
        }
        finally
        {
            //将异常信息写入本地库异常文件
            Func.LogSqliteErrs(errInfos, table);
        }
    }

    /**
     * 查询本地库分组数据,如果主键包含协议号,传入协议号作为条件;如果主键不包含协议号,入参传-1;
     *
     * @param table      表对象
     * @param protocolid 协议号,为-1时,查询全表
     * @param errInfos   异常信息收集对象
     */
    @Override public TableData querySqliteData(Table table, Integer protocolid, Map<String, HashMap<Integer, Exception>> errInfos) throws Exception
    {
        //定义数据库分组数据对象
        TableData result = new TableData();
        try
        {
            Init.sqLiteOper.openConn();
            String sql = assembleSqliteDataSql(protocolid, table);
            ResultSet rs = Init.sqLiteOper.getResultSet(sql, null);
            ResultSetMetaData rsmd = rs.getMetaData();
            int count = rsmd.getColumnCount();
            while (rs.next())
            {
                Map<String, String> lineData = new HashMap<>();
                //动态获取数据库结果集中的数据组装行数据内存
                for (int i = 1; i <= count; i++)
                {
                    String colName = rsmd.getColumnName(i);
                    String data = rs.getString(colName);
                    lineData.put(colName, data);
                }
                StringBuilder pkKey = new StringBuilder();
                //组装主键key值
                for (Pk pk : table.getPks())
                {
                    String pkName = pk.getColName();
                    pkKey.append(lineData.get(pkName) + "@sep@");
                }
                for (int i = 0; i < 5; i++)
                {
                    //删除最后的一个@sep@
                    pkKey.deleteCharAt(pkKey.length() - 1);
                }
                result.getDatas().put(pkKey.toString(), lineData);
            }
        }
        catch (Exception e)
        {
            //主线程发生异常时,记录一条group = querySqliteData的异常记录
            HashMap<Integer, Exception> flowErr = new HashMap<>();
            flowErr.put(null, e);
            errInfos.put("querySqliteData", flowErr);
            DataAsExpSet.throwExpByMsg("同步表:" + table.getSchemaName() + "." + table.getTableName() + ",单表主线程,查询本地库数据时发生异常,protocolid :" + protocolid, null, null, e);
        }
        finally
        {
            try
            {
                Init.sqLiteOper.closeConn();
            }
            catch (Exception e)
            {

            }
        }
        return result;
    }

    /**
     * 组装本地库数据查询SQL
     *
     * @param protocolid 协议号,为-1时,查询全表
     * @param table      表对象
     * @return SQL语句
     */
    @Override public String assembleSqliteDataSql(Integer protocolid, Table table)
    {
        StringBuilder builder = new StringBuilder();
        builder.append("select ");
        for (Col col : table.getColSqliteMap().values())
        {
            // 根据本地库列信息拼接查询语句,
            // 如果是保留列：直接拼接
            // 如果是删除列：不拼接
            // 如果是新增列：按null值拼接
            Enums.ColExcuteType type = col.getColExcuteType();
            switch (type)
            {
                case RETAIN:
                    builder.append(col.getColName() + "as" + col.getColName() + " ,");
                    break;
                case ADDED:
                    builder.append("null as " + col.getColName() + " ,");
                    break;
                case DELETE:
                    break;
                default:
                    break;
            }
        }
        //如果sql以,结尾删除结尾的,
        if (builder.charAt(builder.length() - 1) == ',')
        {
            builder.deleteCharAt(builder.length() - 1);
        }
        builder.append(" from " + table.getTableName() + " ");
        //拼接protocolid查询条件
        if (protocolid == null)
        {
            builder.append("where protocolid is null ");
        }
        else if (protocolid != -1)
        {
            builder.append("where protocolid = " + protocolid + " ");
        }
        return builder.toString();
    }

    /**
     * 查询关系库分组数据,如果主键包含协议号,传入协议号作为条件;如果主键不包含协议号,入参传-1;
     *
     * @param table      表对象
     * @param protocolid 协议号,为-1时,查询全表
     * @param errInfos   异常收集对象
     */
    @Override public TableData queryDbData(Table table, Integer protocolid, Map<String, HashMap<Integer, Exception>> errInfos) throws Exception
    {
        TableData result = new TableData();
        try
        {
            Init.dbOperBase.openConn();
            String sql = assembleDbDataSql(protocolid, table);
            ResultSet rs = Init.dbOperBase.getResultSet(sql, null);
            ResultSetMetaData rsmd = rs.getMetaData();
            int count = rsmd.getColumnCount();
            while (rs.next())
            {
                Map<String, String> lineData = new HashMap<>();
                //动态获取数据库结果集中的数据组装行数据内存
                for (int i = 1; i <= count; i++)
                {
                    String colName = rsmd.getColumnName(i);
                    String data = rs.getString(colName);
                    lineData.put(colName, data);
                }
                StringBuilder pkKey = new StringBuilder();
                //组装主键key值
                for (Pk pk : table.getPks())
                {
                    String pkName = pk.getColName();
                    pkKey.append(lineData.get(pkName) + "@sep@");
                }
                for (int i = 0; i < 5; i++)
                {
                    //删除最后的一个@sep@
                    pkKey.deleteCharAt(pkKey.length() - 1);
                }
                result.getDatas().put(pkKey.toString(), lineData);
            }
        }
        catch (Exception e)
        {
            //主线程发生异常时,记录一条group = queryDbData的异常记录
            HashMap<Integer, Exception> flowErr = new HashMap<>();
            flowErr.put(null, e);
            errInfos.put("queryDbData", flowErr);
            DataAsExpSet.throwExpByMsg("同步表:" + table.getSchemaName() + "." + table.getTableName() + ",单表主线程,查询关系库数据时发生异常,protocolid :" + protocolid, null, null, e);
        }
        finally
        {
            try
            {
                Init.dbOperBase.closeConn();
            }
            catch (Exception e)
            {

            }

        }
        return result;
    }

    /**
     * 组装关系库数据查询SQL
     *
     * @param protocolid 协议号,为-1时,查询全表
     * @param table      表对象
     * @return SQL语句
     */
    @Override public String assembleDbDataSql(Integer protocolid, Table table)
    {
        StringBuilder builder = new StringBuilder();
        builder.append("select * from " + table.getSchemaName() + "." + table.getTableName() + " ");
        //拼接protocolid查询条件
        if (protocolid == null)
        {
            builder.append("where protocolid is null ");
        }
        else if (protocolid != -1)
        {
            builder.append("where protocolid = " + protocolid + " ");
        }
        return builder.toString();
    }

    /**
     * 比较本地库、关系库 分组数据 生成数据库脚本
     *
     * @param sqliteData 本地库数据集
     * @param dbData     关系库数据集
     * @param table      表对象
     * @param errInfos   错误异常信息
     * @param delSqls    记录删除SQL集合
     * @return 数据库脚本集合
     */
    @Override public void compareTableData(TableData sqliteData, TableData dbData, Table table, Map<String, HashMap<Integer, Exception>> errInfos, List<String> delSqls)
    {
    }

    /**
     * 删除PG库 单表数据 本地库中不存在关系库中存在的协议号数据
     *
     * @param table       表对象
     * @param protocolids 协议号集合
     * @param errInfos    异常记录集合
     * @param delSqls     删除SQL集合
     */
    @Override public void deleteNoExistProData(Table table, List<Integer> protocolids, Map<String, HashMap<Integer, Exception>> errInfos, List<String> delSqls) throws Exception
    {
        StringBuilder builder = new StringBuilder();
        builder.append("delete from " + table.getSchemaName() + "." + table.getTableName() + " where protocolid in ( ");
        protocolids.forEach(protocolid -> builder.append(protocolid + ","));
        builder.deleteCharAt(builder.length() - 1);
        builder.append(")");
        //将删除语句添加到 删除记录对象中
        delSqls.add(builder.toString());
    }
}
